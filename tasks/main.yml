---
# tasks file for zfs-root-ansible

- name: Install SSH server
  apt: name=ssh state=present
  tags:
    - usb_prep

- name: Make sure SSH server is enabled and runs on boot
  service: name=ssh state=started enabled=yes
  tags:
    - usb_prep

- name: Install Utility packages
  apt: name={{ item }} state=present
  with_items:
    - lsscsi
    - sg3-utils
    - software-properties-common
  tags:
    - usb_prep

- name: Add Zfs on Linux Repository
  apt_repository: repo='ppa:zfs-native/stable' state=present
  register: zol_repo_status
  tags:
    - usb_prep

- name: Update apt-cache
  apt: update_cache=yes
  when: zol_repo_status.changed
  tags:
    - usb_prep

- name: Install ZFS on Linux packages
  apt: name={{ item }} state=installed
  with_items:
    - ubuntu-zfs
    - zfs-initramfs
  tags:
    - usb_prep

- name: Add udev rule 
  copy: src=90-zfs-vdev.rules dest=/etc/udev/rules.d/90-zfs-vdev.rules owner=root group=root
  tags:
    - usb_prep

- name: Load zfs module
  command: /sbin/modprobe zfs
  changed_when: False
  tags:
    - zfs_bootstrap  

- name: Get list of Available zfs pools
  command: zpool list
  register: zpool_list
  changed_when: False
  tags:
    - zfs_bootstrap

- name: Destroy existing rpool
  command: zpool destroy -f rpool
  when: "'rpool' in zpool_list.stdout"
  tags:
    - zfs_bootstrap

- name: Remove existing MBR and GPT partition tables from zfs root drive
  command: sgdisk -Z {{ root_drive }}
  tags:
    - zfs_bootstrap

- name: Upload partition layout file
  copy: src=partition_table.dat dest=/tmp/partition_table.dat
  tags:
    - zfs_bootstrap

- name: Create new partition layout on zfs root drive
  shell: /sbin/sfdisk --force -q -uS {{ root_drive }} < /tmp/partition_table.dat
  ignore_errors: true
  tags:
    - zfs_bootstrap

- name: Run partprobe
  command: partprobe
  tags:
    - zfs_bootstrap

- name: Update device list with udevadm
  command: udevadm trigger
  changed_when: false

- name: Get root drive partition using /dev/disk/by-id
  shell: ls -l /dev/disk/by-id | grep -v wwn | grep {{ root_drive | basename }}1 | awk '{print $(NF-2)}'
  register: root_drive_device
  changed_when: False
  tags:
    - zfs_bootstrap

- name: Create new rpool
  command: zpool create -d -o feature@async_destroy=enabled -o feature@empty_bpobj=enabled -o feature@lz4_compress=enabled -o ashift=12 -O compression=lz4 -f rpool {{ root_drive_device.stdout }}
  tags:
    - zfs_bootstrap

- name: Create ROOT and Ubuntu datasets
  zfs: name={{ item }} state=present
  with_items:
    - rpool/ROOT
    - rpool/ROOT/ubuntu
  tags:
    - zfs_bootstrap

- name: Create temporary directory for Bind Mount
  file: path=/mnt/tmp state=directory
  tags:
    - zfs_bootstrap

- name: Perfrom bind mount of existing root filesystem
  command: mount -o rw,bind / /mnt/tmp
  tags:
    - zfs_bootstrap

- name: Copy existing root to new zfs root dataset
  command: rsync -avPX /mnt/tmp/. /rpool/ROOT/ubuntu/.
  tags:
    - zfs_bootstrap

- name: Clean up /etc/fstab on rpool dataset
  template: src=templates/fstab.j2 dest=/rpool/ROOT/ubuntu/etc/fstab owner=root group=root
  tags:
    - zfs_bootstrap

- name: Update grub configuration file
  template: src=templates/grub.j2 dest=/rpool/ROOT/ubuntu/etc/default/grub
  tags:
    - zfs_bootstrap

# Don't use ansible module as it requires fstab update.
# Defining fstab=/dev/null brakes the task. 
- name: Mount virtual filesystems for grub installation
  command: mount -o bind -t {{ item.type }} /{{ item.path }} /rpool/ROOT/ubuntu/{{ item.path }}
  with_items:
    - { path: 'proc', type: 'proc' }
    - { path: 'sys', type: 'sysfs' }
    - { path: 'dev', type: 'devtmpfs' }
  tags:
    - grub_install

- name: Update device list with udevadm
  command: udevadm trigger
  changed_when: false

- name: Execute update-grub
  shell: chroot /rpool/ROOT/ubuntu update-grub
  tags:
    - grub_install

- name: Install grub on zfs root drive
  command: grub-install --boot-directory=/rpool/ROOT/ubuntu/boot {{ root_drive }}
  tags:
    - grub_install

- name: Unmount bind filesystems
  mount: name={{ item.name }} src={{ item.src }} fstype={{ item.type }} state=unmounted
  with_items:
    - { name: '/rpool/ROOT/ubuntu/proc', src: '/proc', type: 'proc' }
    - { name: '/rpool/ROOT/ubuntu/sys', src: '/sys', type: 'sysfs' }
    - { name: '/rpool/ROOT/ubuntu/dev', src: '/dev', type: 'devtmpfs' }
    - { name: '/mnt/tmp', src: '/', type: 'none' }
  tags:
    - grub_install

- name: Remove zpool cache file
  file: path=/etc/zfs/zpool.cache state=absent

- name: Update initramfs
  command: update-initramfs -u
